{"componentChunkName":"component---src-components-templates-blog-post-index-tsx","path":"/2018-11-04/kotlin-master-standard/","webpackCompilationHash":"ba52f1086fd9364c2599","result":{"data":{"markdownRemark":{"html":"<p style=\"text-align:center;\"><img src=\"https://user-images.githubusercontent.com/1689721/66471415-3a0f0d80-eac6-11e9-8e7b-5c6ebbc39f09.png\" alt=\"Kotlin\" style=\"height:150px;\"></p>\n<p>Kotlin 언어를 사용하다보면 이런 구문이 자주 보이게 될겁니다. <code class=\"language-text\">T.apply {}</code>, <code class=\"language-text\">T.run {}</code> 등 Java에는 없지만 Kotlin에 존재하는 확장함수라는 것을 직접 만들어보도록 하겠습니다.</p>\n<h2 id=\"확장함수extension-function\"><a href=\"#%ED%99%95%EC%9E%A5%ED%95%A8%EC%88%98extension-function\" aria-label=\"확장함수extension function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장함수(Extension Function)</h2>\n<p>Java에서 기본으로 제공되는 클래스들에 함수를 추가하려면 새로운 클래스를 만들거나 static함수를 만들어 사용해야만하는 불편함이 있었습니다.</p>\n<p>간단한 예를 들기위해 boolean과 int간의 형변환 예제를 만들어 보겠습니다.</p>\n<p>{% include services/gist.html src=\"624d15c72cfb91d1382d9048508663ee\" %}</p>\n<p>삼항연산자로 짧은 코드를 만들었지만, 한눈에 의미를 파악하기 어렵고, 이런 코드가 반복되다보면 그렇게 보기좋은 코드가 되지 못합니다.</p>\n<p>그래서 별도의 사용자 클래스내의 static타입의 함수를 만들어 사용하기도 했습니다. (어디까지나 설명을 위해 만든 예제이고, 실제로 이런식으로 bool과 int간의 형변환을 자주 사용하진 않습니다.)</p>\n<p>하지만 Kotlin에서는 확장함수를 통해 Int와 Boolean 클래스에 함수를 만들어줘 클래스를 만드는 번거로움이 없이 편하게 함수를 추가할 수 있습니다.</p>\n<p>{% include services/gist.html src=\"4ff1dd8b88d7670028a9138d0be22b1c\" %}</p>\n<p>Int와 Boolean클래스에 확장함수를 만들어 주어 기존 클래스에 있는 것처럼 사용할 수 있습니다.</p>\n<p>참고로 이렇게 확장함수를 넣어주게되면 <code class=\"language-text\">100.toBoolean()</code>, <code class=\"language-text\">true.toInt()</code> 이런식의 코드 또한 가능합니다.</p>\n<h2 id=\"람다식lambda-expression\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9Dlambda-expression\" aria-label=\"람다식lambda expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다식(Lambda Expression)</h2>\n<p>Kotlin의 람다식은 변수처럼 활용이 가능합니다. 특정 함수내에서만 존재하는 함수를 만들거나, 상황에 따라 함수의 내용이 수정되어야 할때 아주 유용한 방법입니다.</p>\n<p>람다식을 매개변수로하는 함수 하나를 만들어 보겠습니다.</p>\n<p>{% include services/gist.html src=\"c082d9001a753da7646adf0fadc0828c\" %}</p>\n<p>Int 클래스에 returnMe라는 함수를 하나 만들었습니다. 이 함수는 약간 복잡해 보이지만 천천히 보시면 이해할 수 있습니다.</p>\n<p>먼저 매개변수인 some을 보겠습니다. <code class=\"language-text\">() -&gt; String</code>으로 String을 리턴하는 람다식입니다. 하지만 <code class=\"language-text\">Int.()</code>으로 시작하는 걸보면 이 람다식은 Int의 확장 함수로 사용됩니다. 따라서 <code class=\"language-text\">returnMe</code>라는 함수 내에서는 Int클래스에는 some이라는 함수를 사용할 수 있습니다.</p>\n<p>함수의 내용을 보시면 <code class=\"language-text\">= this.some()</code>이 오는데 현재 <code class=\"language-text\">returnMe</code>라는 함수는 Int클래스의 확장 함수이므로 this는 Int형 객체가 됩니다. 그러니 <code class=\"language-text\">some()</code>이라는 확장 함수가 사용할 수 있는 것이죠. 그 리턴값은 String형으로 <code class=\"language-text\">returnMe</code> 함수의 리턴값으로 다시 넘겨지게됩니다.</p>\n<p>마지막으로 사용하는 4~5라인을 보시면 아시겠지만, Kotlin의 함수에서 마지막 매개변수가 람다식이면 이는 <code class=\"language-text\">()</code>에서 생략이 가능해집니다. 최종적으로는 <code class=\"language-text\">T.apply {}</code>와 같은 형태가 되는것이죠.</p>\n<hr>\n<p>Kotlin의 확장 함수뿐만 아니라 람다식과 함께 쓰인다면 좀더 좋은 시너지 효과를 낼 수 있습니다.</p>\n<p>물론 예제처럼 굳이 사용할 필요가 없는 곳에서 사용해 남용하게되면 이는 좋지 못한 코드가 되겠지만 그 부분은 이 글을 읽으시는 분이 직접 판단하셔야 할 부분입니다.</p>\n<hr>\n<p>오타, 오류 등이 있다면 댓글이나 이메일을 통해 알려주시면 감사하겠습니다. :D</p>","frontmatter":{"title":"Kotlin 확장 함수 활용하기","date":"2018.11.04","category":"Kotlin"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-11-04/kotlin-master-standard/","previous":{"fields":{"slug":"/2018-10-22/kotlin-master-standard/"},"frontmatter":{"title":"Kotlin 표준 함수 마스터하기","template":"BlogPost"}},"next":{"fields":{"slug":"/Working/"},"frontmatter":{"title":"블로그가 공사중입니다... :D","template":"BlogPost"}}}}}